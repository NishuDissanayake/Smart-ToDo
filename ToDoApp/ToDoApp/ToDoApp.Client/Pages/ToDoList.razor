@page "/todo"
@using ToDoApp.Client.Models
@using ToDoApp.Client.Services
@using ToDoApp.Client.Components
@rendermode InteractiveAuto

@inject ToDoService toDoService

<PageTitle>To Do List</PageTitle>

<div class="main-container">
    <h3>Hello, User</h3>

    <EditForm Model="newTask" OnValidSubmit="addTask">
        <DataAnnotationsValidator />
        <ValidationSummary></ValidationSummary>

        <div class="add-title">
            <label>Title</label>
            <input type="text" @bind="newTask.Title" placeholder="Task Title" />

            <label>Description</label>
            <textarea @bind="newTask.Description" placeholder="Task Description"></textarea>

            <label>Due Date</label>
            <input type="date" @bind="newTask.DueDate" />

            <button type="submit">Add New Task</button>
        </div>
    </EditForm>

    <p>Incomplete Tasks: @toDoService.GetIncompleteTaskCount()</p>

    <label>Filter Tasks:</label>
    <select @bind="SelectedFilter">
        <option value="@((int)TaskFilter.All)">All</option>
        <option value="@((int)TaskFilter.Active)">Active</option>
        <option value="@((int)TaskFilter.Completed)">Completed</option>
    </select>

    <div class="item-list">
        <table>
            <thead>
                <tr>
                    <th>Task Id</th>
                    <th>Title</th>
                    <th>Description</th>
                    <th>Due Date</th>
                    <th>Completion State</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var task in Tasks)
                {
                    <tr>
                        <td>@task.Id</td>
                        <td>@task.Title</td>
                        <td>@task.Description</td>
                        <td>@task.DueDate.ToShortDateString()</td>
                        <td>
                            <input type="checkbox" @bind="task.IsDone" @oninput="() => toggleCompletion(task.Id)" />
                        </td>
                        <td>
                            <button @onclick="() => OpenEditModal(task)">Edit</button>
                            <button @onclick="() => deleteTask(task.Id)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<UpdateModal EditingTask="editingTask"
               Show="showEditModal"
               OnSave="SaveEditedTask"
               OnCancel="CloseEditModal" />

@code {
    private ToDoItem newTask = new();
    private List<ToDoItem> Tasks = new();
    private bool showEditModal = false;
    private ToDoItem editingTask = new();
    private TaskFilter selectedFilter = TaskFilter.All;

    private TaskFilter SelectedFilter
    {
        get => selectedFilter;
        set
        {
            selectedFilter = value;
            LoadTasks();
        }
    }

    protected override void OnInitialized()
    {
        LoadTasks();
    }

    private void LoadTasks()
    {
        Tasks = toDoService.GetFilteredTasks(selectedFilter);
    }

    private void addTask()
    {
        toDoService.AddTask(newTask);
        LoadTasks();
        newTask = new();
    }

    private void deleteTask(int taskId)
    {
        toDoService.DeleteTask(taskId);
        LoadTasks();
    }

    private void toggleCompletion(int taskId)
    {
        toDoService.StateToggle(taskId);
        LoadTasks();
    }

    private void OpenEditModal(ToDoItem task)
    {
        editingTask = task;
        showEditModal = true;
    }

    private void SaveEditedTask(ToDoItem updatedTask)
    {
        toDoService.EditTask(updatedTask.Id, updatedTask.Title, updatedTask.Description, updatedTask.DueDate);
        showEditModal = false;
        LoadTasks();
    }

    private void CloseEditModal()
    {
        showEditModal = false;
    }
}

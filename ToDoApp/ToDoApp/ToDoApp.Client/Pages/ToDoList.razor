@page "/todo"
@using ToDoApp.Client.Models
@using ToDoApp.Client.Services
@using ToDoApp.Client.Components
@rendermode InteractiveAuto

@inject ToDoService toDoService
@inject AuthService authService
@inject NavigationManager Navigation

<PageTitle>To Do List</PageTitle>

@if (!authService.IsAuthenticated)
{
    <div class="flex flex-col items-center justify-center min-h-screen text-gray-700">
        <p class="text-lg">You are not currently logged in.</p>
        <a href="/login" class="text-green-700 font-semibold hover:underline">Click here to log in</a>
    </div>
}
else
{
    <div class="max-w-3xl mx-auto mt-10 bg-white p-6 rounded-lg shadow-lg">
        <div class="flex justify-between items-center mb-6">
            <h3 class="text-2xl font-semibold text-gray-900">Hello, @authService.CurrentUser!.Username</h3>
            <button @onclick="Logout"
                    class="bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700 transition">
                Sign Out
            </button>
        </div>

        <EditForm Model="newTask" OnValidSubmit="addTask" class="space-y-4 bg-gray-50 p-4 rounded-lg shadow">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-red-500 text-sm" />

            <div>
                <label class="block font-medium text-gray-700">Title</label>
                <input type="text" @bind="newTask.Title"
                       class="w-full border border-gray-300 rounded-lg px-4 py-2 focus:ring-2 focus:ring-green-600 focus:border-green-600 focus:outline-none"
                       placeholder="Task Title" />
            </div>

            <div>
                <label class="block font-medium text-gray-700">Description</label>
                <textarea @bind="newTask.Description"
                          class="w-full border border-gray-300 rounded-lg px-4 py-2 focus:ring-2 focus:ring-green-600 focus:border-green-600 focus:outline-none"
                          placeholder="Task Description"></textarea>
            </div>

            <div>
                <label class="block font-medium text-gray-700">Due Date</label>
                <input type="date" @bind="newTask.DueDate"
                       class="w-full border border-gray-300 rounded-lg px-4 py-2 focus:ring-2 focus:ring-green-600 focus:border-green-600 focus:outline-none" />
            </div>

            <button type="submit"
                    class="w-full bg-green-700 text-white px-4 py-2 rounded-lg hover:bg-green-800 transition">
                Add New Task
            </button>
        </EditForm>

        <p class="mt-6 text-lg font-semibold text-gray-800">Incomplete Tasks: @IncompleteTasksCount</p>

        <div class="mt-4">
            <label class="block font-medium text-gray-700">Filter Tasks:</label>
            <select @bind="SelectedFilter"
                    class="w-full border border-gray-300 rounded-lg px-4 py-2 mt-1 focus:ring-2 focus:ring-green-600 focus:border-green-600 focus:outline-none">
                <option value="@((int)TaskFilter.All)">All</option>
                <option value="@((int)TaskFilter.Active)">Active</option>
                <option value="@((int)TaskFilter.Completed)">Completed</option>
            </select>
        </div>

        <div class="mt-6 overflow-x-auto">
            <table class="min-w-full border border-gray-200 rounded-lg shadow-sm">
                <thead class="bg-green-700 text-white">
                    <tr>
                        <th class="p-3">Task Id</th>
                        <th class="p-3">Title</th>
                        <th class="p-3">Description</th>
                        <th class="p-3">Due Date</th>
                        <th class="p-3">Completed</th>
                        <th class="p-3">Actions</th>
                    </tr>
                </thead>
                <tbody class="bg-white">
                    @foreach (var task in Tasks)
                    {
                        <tr class="border-b">
                            <td class="p-3">@task.Id</td>
                            <td class="p-3">@task.Title</td>
                            <td class="p-3">@task.Description</td>
                            <td class="p-3">@task.DueDate.ToShortDateString()</td>
                            <td class="p-3 text-center">
                                <input type="checkbox" @bind="task.IsDone"
                                       @oninput="() => toggleCompletion(task.Id)" />
                            </td>
                            <td class="p-3 flex space-x-2">
                                <button @onclick="() => OpenEditModal(task)"
                                        class="bg-blue-500 text-white px-3 py-1 rounded hover:bg-blue-600 transition">
                                    Edit
                                </button>
                                <button @onclick="() => deleteTask(task.Id)"
                                        class="bg-red-500 text-white px-3 py-1 rounded hover:bg-red-600 transition">
                                    Delete
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
}

<UpdateModal EditingTask="editingTask"
             Show="showEditModal"
             OnSave="SaveEditedTask"
             OnCancel="CloseEditModal" />

@code {
    private ToDoItem newTask = new();
    private List<ToDoItem> Tasks = new();
    private bool showEditModal = false;
    private ToDoItem editingTask = new();
    private TaskFilter selectedFilter = TaskFilter.All;
    private int IncompleteTasksCount;

    private TaskFilter SelectedFilter
    {
        get => selectedFilter;
        set
        {
            selectedFilter = value;
            _ = LoadTasks();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && authService.IsAuthenticated)
        {
            await toDoService.LoadTasksAsync();
            await LoadTasks();
        }
    }

    private async Task LoadTasks()
    {
        if (!authService.IsAuthenticated)
        {
            Navigation.NavigateTo("/login");
            return;
        }

        Tasks = await toDoService.GetFilteredTasksAsync(selectedFilter);
        IncompleteTasksCount = await toDoService.GetIncompleteTaskCountAsync();
        StateHasChanged();
    }

    private async Task addTask()
    {
        if (!authService.IsAuthenticated) return;

        newTask.UserId = Guid.Parse(authService.CurrentUser!.UserId);
        await toDoService.AddTaskAsync(newTask);
        await LoadTasks();
        newTask = new();
    }

    private async Task deleteTask(int taskId)
    {
        if (!authService.IsAuthenticated) return;

        await toDoService.DeleteTaskAsync(taskId);
        await LoadTasks();
    }

    private async Task toggleCompletion(int taskId)
    {
        if (!authService.IsAuthenticated) return;

        await toDoService.StateToggleAsync(taskId);
        await LoadTasks();
    }

    private void OpenEditModal(ToDoItem task)
    {
        editingTask = task;
        showEditModal = true;
    }

    private async Task SaveEditedTask(ToDoItem updatedTask)
    {
        await toDoService.EditTaskAsync(updatedTask.Id, updatedTask.Title, updatedTask.Description, updatedTask.DueDate);
        showEditModal = false;
        await LoadTasks();
    }

    private void CloseEditModal()
    {
        showEditModal = false;
    }

    private async Task Logout()
    {
        await authService.LogoutAsync();
        Navigation.NavigateTo("/login");
    }
}

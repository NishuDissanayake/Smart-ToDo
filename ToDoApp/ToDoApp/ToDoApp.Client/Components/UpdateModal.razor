@using ToDoApp.Client.Models
<div class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50"
     style="display: @(Show ? "flex" : "none")">
    <div class="bg-white p-6 rounded-lg shadow-md w-1/3">
        <h3 class="text-xl font-bold mb-4">Edit Task</h3>

        <EditForm Model="EditingTask" OnValidSubmit="SaveChanges">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-red-500" />

            <div class="mb-4">
                <label class="block font-semibold">Title</label>
                <input type="text" @bind="EditingTask.Title" class="border p-2 w-full rounded" />
            </div>

            <div class="mb-4">
                <label class="block font-semibold">Description</label>
                <textarea @bind="EditingTask.Description" class="border p-2 w-full rounded"></textarea>
            </div>

            <div class="mb-4">
                <label class="block font-semibold">Due Date</label>
                <input type="date" @bind="EditingTask.DueDate" class="border p-2 w-full rounded" />
            </div>

            <div class="flex justify-end space-x-2 mt-4">
                <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">
                    Update
                </button>
                <button type="button" @onclick="Cancel" class="bg-gray-400 text-white px-4 py-2 rounded">
                    Cancel
                </button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [Parameter] public ToDoItem EditingTask { get; set; } = new();
    [Parameter] public bool Show { get; set; }
    [Parameter] public EventCallback<ToDoItem> OnSave { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    private async Task SaveChanges()
    {
        await OnSave.InvokeAsync(EditingTask);
    }

    private async Task Cancel()
    {
        await OnCancel.InvokeAsync();
    }
}
